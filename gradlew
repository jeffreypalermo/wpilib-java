#!/bin/sh

# Copyright 2015 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

##############################################################################
##
##  Gradle start up script for POSIX generated by Gradle.
##
##  Important for running:
##
##  (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
##      noncompliant, but you have some other compliant shell such as ksh or
##      bash, then to run this script, type that shell name before the whole
##      command line, like:
##
##          ksh Gradle
##
##      Busybox and similar reduced shells will NOT work, because this script
##      requires all of these POSIX shell features:
##        * functions;
##        * expansions "${var#prefix}" and "${var%suffix}";
##        * arithmetic expressions "$((expression))";
##        * "${var+value}" replacement;
##        * and "$( cmd )" command substitution.
##
##  (2) This script is generated from the Groovy template
##      https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
##      within the Gradle project.
##
##      You can find Gradle at https://github.com/gradle/gradle/.
##
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%/*}
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(...)
      /*)   app_path=$link ;;
      *)    app_path=$APP_HOME/$link ;;
    esac
  done

APP_HOME=$( cd "${APP_HOME:-./}" && pwd -P ) || exit

APP_BASE_NAME=${0##*/}

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='-Xmx64m -Xms64m'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
}

die () {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support functions.
#
# For Mac OS X, set the Java application name.
# For Cygwin or MSYS, switch paths to Windows format before running java.

case "$( uname )" in                #(...)
  Darwin*)
    [ -n "$JAVA_HOME" ] && \[
      -x "$JAVA_HOME/bin/java" \] && JAVA_HOME="$JAVA_HOME" || \[
      -x "/Library/Java/Home/bin/java" \] && JAVA_HOME="/Library/Java/Home" || \[
      -x "/System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/java" \] && JAVA_HOME="/System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands"
    ;;
  MINGW*|MSYS*)
    [ -n "$JAVA_HOME" ] && \[
      -x "$JAVA_HOME/bin/java" \] && JAVA_HOME="$JAVA_HOME" || \[
      -x "/c/Program Files/Java/jdk/bin/java" \] && JAVA_HOME="/c/Program Files/Java/jdk"
    ;;
  CYGWIN*)
    [ -n "$JAVA_HOME" ] && \[
      -x "$JAVA_HOME/bin/java" \] && JAVA_HOME="$JAVA_HOME" || \[
      -x "/cygdrive/c/Program Files/Java/jdk/bin/java" \] && JAVA_HOME="/cygdrive/c/Program Files/Java/jdk"
    ;;
  *)
    :
    ;;
esac

# Increase the maximum file descriptors if we can.
if [ "$MAX_FD" != "maximum" ] && [ "$MAX_FD" != "" ] ; then
    MAX_FD_LIMIT=$( ulimit -H -n )
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" ] || [ "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar

# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Escape application args
save () {
    for i do printf %s\\n "$i" | sed "s/'/'\\''/g;1s/^/'/;
$ s/$/' \\$/" ; done
    echo " "
}
APP_ARGS=$(save "$@")

# Collect all arguments for the java command:
exec "$JAVACMD" $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \
  -Dorg.gradle.appname=$APP_BASE_NAME \
  -classpath "$CLASSPATH" \
  org.gradle.wrapper.GradleWrapperMain \
  $APP_ARGS
